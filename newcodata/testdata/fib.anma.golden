(def + (lambda (arg0 arg1) (case ((var arg0) (var arg1)) (clause ((var x) (var y)) (seq (prim add (var x) (var y)))))))
(def zipWith (lambda (arg0 arg1 arg2) (object (field head (case ((var arg0) (var arg1) (var arg2)) (clause ((var f) (var xs) (var ys)) (seq (call (var f) (access (var xs) head) (access (var ys) head)))))) (field tail (case ((var arg0) (var arg1) (var arg2)) (clause ((var f) (var xs) (var ys)) (seq (call (var zipWith) (var f) (access (var xs) tail) (access (var ys) tail)))))))))
(def fib (object (field head (seq (literal 1))) (field tail (object (field head (seq (literal 1))) (field tail (seq (call (var zipWith) (lambda (arg0 arg1) (case ((var arg0) (var arg1)) (clause ((var x) (var y)) (seq (binary (var x) + (var y)))))) (var fib) (access (var fib) tail))))))))
(def main (lambda () (seq (prim print (access (access (access (access (var fib) tail) tail) tail) head)))))
