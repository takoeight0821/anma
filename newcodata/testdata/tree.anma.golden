(type (var Int) (prim int))
(type (call (var List) (var a)) (call (var Nil)) (call (var Cons) (var a) (var List)))
(infix infixl 6 -)
(def - (lambda () (seq (prim sub (var x) (var y)))))
(def map (lambda () (seq (call (var Nil)))))
(def prune (lambda () (object (field children (seq (var Nil))) (field node (seq (access (var t) node))))))
(def tree (object (field children (seq (call (var Cons) (var tree1) (call (var Cons) (var tree2) (call (var Nil)))))) (field node (seq (literal 1)))))
(def tree1 (object (field children (seq (call (var Nil)))) (field node (seq (literal 2)))))
(def tree2 (object (field children (seq (call (var Cons) (var tree) (call (var Nil))))) (field node (seq (literal 3)))))
(def main (lambda () (seq (call (var prune) (literal 2) (var tree)))))
