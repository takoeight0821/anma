(* Code generated by go generate; DO NOT EDIT. *)

decl = typeDecl | varDecl | infixDecl ; (* func decl *)

typeDecl = "type" type "=" type ("|" type)* ; (* func typeDecl *)

varDecl = "def" identifier "=" expr | "def" identifier ":" type | "def" identifier ":" type "=" expr ; (* func varDecl *)

infixDecl = ("infix" | "infixl" | "infixr") INTEGER OPERATOR ; (* func infixDecl *)

expr = let | fn | assert ; (* func expr *)

let = "let" pattern "=" assert ; (* func let *)

fn = "fn" "(" param_list? ")" "{" expr (";" expr)* ";"? "}" ;
param_list = param ("," param)* ","? ; (* func fn *)

atom = var | literal | paren | codata | PRIM "(" IDENTIFIER ("," expr)* ","? ")" ; (* func atom *)

assert = binop (":" type)* ; (* func assert *)

binary = method (operator method)* ; (* func binary *)

method = atom (accessTail | callTail)* ; (* func method *)

accessTail = "." IDENTIFIER callTail? ; (* func accessTail *)

callTail = "(" ")" | "(" expr ("," expr)* ","? ")" ; (* func callTail *)

codata = "{" clause ("," clause)* ","? "}" ; (* func codata *)

clause = pattern "->" expr (";" expr)* ";"? ; (* func clause *)

pattern = methodPat ; (* func pattern *)

methodPat = atomPat (accessPatTail | callPatTail)* ; (* func methodPat *)

accessPatTail = "." IDENTIFIER callPatTail? ; (* func accessPatTail *)

callPatTail = "(" ")" | "(" pattern ("," pattern)* ","? ")" ; (* func callPatTail *)

atomPat = IDENT | INTEGER | STRING | "(" pattern ")" ; (* func atomPat *)

type = binopType ; (* func typ *)

binopType = callType (operator callType)* ; (* func binopType *)

callType = (PRIM "(" IDENTIFIER ("," type)* ","? ")" | atomType) ("(" ")" | "(" type ("," type)* ","? ")")* ; (* func callType *)

atomType = IDENT | "{" fieldType ("," fieldType)* ","? "}" | "(" type ("," type)* ","? ")" ; (* func atomType *)

fieldType = IDENTIFIER ":" type ; (* func fieldType *)

