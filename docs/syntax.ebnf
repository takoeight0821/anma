(* Code generated by go generate; DO NOT EDIT. *)

decl = typeDecl | varDecl | infixDecl ; (* func decl *)

typeDecl = "type" IDENTIFIER "=" type ; (* func typeDecl *)

varDecl = "def" identifier "=" expr | "def" identifier ":" type | "def" identifier ":" type "=" expr ; (* func varDecl *)

infixDecl = ("infix" | "infixl" | "infixr") INTEGER OPERATOR ; (* func infixDecl *)

expr = let | fn | assert ; (* func expr *)

let = "let" pattern "=" assert ; (* func let *)

fn = "fn" pattern "{" expr (";" expr)* ";"? "}" ; (* func fn *)

atom = var | literal | paren | codata ; (* func atom *)

assert = binop (":" type)* ; (* func assert *)

binary = access (operator access)* ; (* func binary *)

access = call ("." IDENTIFIER)* ; (* func access *)

call = atom ("(" ")" | "(" expr ("," expr)* ","? ")")* ; (* func call *)

codata = "{" clause ("," clause)* ","? "}" ; (* func codata *)

clause = pattern "->" expr (";" expr)* ";"? ; (* func clause *)

pattern = accessPat ; (* func pattern *)

accessPat = callPat ("." IDENTIFIER)* ; (* func accessPat *)

callPat = atomPat ("(" ")" | "(" pattern ("," pattern)* ","? ")")* ; (* func callPat *)

atomPat = IDENT | INTEGER | STRING | "(" pattern ("," pattern)* ","? ")" ; (* func atomPat *)

type = binopType ; (* func typ *)

binopType = callType (operator callType)* ; (* func binopType *)

callType = atomType ("(" ")" | "(" type ("," type)* ","? ")")* ; (* func callType *)

atomType = IDENT | "(" type ("," type)* ","? ")" ; (* func atomType *)

