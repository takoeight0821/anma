- input: |
    def + = { #(x, y,) -> prim(add, x, y) }
    def zipWith = {
      #(f, xs, ys).head -> f(xs.head, ys.head),
      #(f, xs, ys).tail -> zipWith(f, xs.tail, ys.tail),
    }
    def fib = {
      #.head -> 1,
      #.tail.head -> 1,
      #.tail.tail -> zipWith({#(x, y) -> x + y}, fib, fib.tail),
    }
    def main = { #() -> fib(10) }
  expected:
    parser: |
      (def + (codata (clause (call (this #) (var x) (var y)) (prim add (var x) (var y)))))
      (def zipWith (codata (clause (access (call (this #) (var f) (var xs) (var ys)) head) (call (var f) (access (var xs) head) (access (var ys) head))) (clause (access (call (this #) (var f) (var xs) (var ys)) tail) (call (var zipWith) (var f) (access (var xs) tail) (access (var ys) tail)))))
      (def fib (codata (clause (access (this #) head) (literal 1)) (clause (access (access (this #) tail) head) (literal 1)) (clause (access (access (this #) tail) tail) (call (var zipWith) (codata (clause (call (this #) (var x) (var y)) (binary (var x) + (var y)))) (var fib) (access (var fib) tail)))))
      (def main (codata (clause (call (this #)) (call (var fib) (literal 10)))))
    codata: |
      (def + (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim add (var x) (var y))))))
      (def zipWith (lambda (paren (var x0) (var x1) (var x2)) (object (field head (case (paren (var x0) (var x1) (var x2)) (clause (paren (var f) (var xs) (var ys)) (call (var f) (access (var xs) head) (access (var ys) head))))) (field tail (case (paren (var x0) (var x1) (var x2)) (clause (paren (var f) (var xs) (var ys)) (call (var zipWith) (var f) (access (var xs) tail) (access (var ys) tail))))))))
      (def fib (object (field head (literal 1)) (field tail (object (field head (literal 1)) (field tail (call (var zipWith) (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (binary (var x) + (var y))))) (var fib) (access (var fib) tail)))))))
      (def main (lambda (paren) (case (paren) (clause (paren) (call (var fib) (literal 10))))))
    infix: |
      (def + (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim add (var x) (var y))))))
      (def zipWith (lambda (paren (var x0) (var x1) (var x2)) (object (field head (case (paren (var x0) (var x1) (var x2)) (clause (paren (var f) (var xs) (var ys)) (call (var f) (access (var xs) head) (access (var ys) head))))) (field tail (case (paren (var x0) (var x1) (var x2)) (clause (paren (var f) (var xs) (var ys)) (call (var zipWith) (var f) (access (var xs) tail) (access (var ys) tail))))))))
      (def fib (object (field head (literal 1)) (field tail (object (field head (literal 1)) (field tail (call (var zipWith) (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (binary (var x) + (var y))))) (var fib) (access (var fib) tail)))))))
      (def main (lambda (paren) (case (paren) (clause (paren) (call (var fib) (literal 10))))))
    nameresolve: |
      (def +.0 (lambda (paren (var x0.4) (var x1.5)) (case (paren (var x0.4) (var x1.5)) (clause (paren (var x.6) (var y.7)) (prim add (var x.6) (var y.7))))))
      (def zipWith.1 (lambda (paren (var x0.8) (var x1.9) (var x2.10)) (object (field head (case (paren (var x0.8) (var x1.9) (var x2.10)) (clause (paren (var f.11) (var xs.12) (var ys.13)) (call (var f.11) (access (var xs.12) head) (access (var ys.13) head))))) (field tail (case (paren (var x0.8) (var x1.9) (var x2.10)) (clause (paren (var f.14) (var xs.15) (var ys.16)) (call (var zipWith.1) (var f.14) (access (var xs.15) tail) (access (var ys.16) tail))))))))
      (def fib.2 (object (field head (literal 1)) (field tail (object (field head (literal 1)) (field tail (call (var zipWith.1) (lambda (paren (var x0.17) (var x1.18)) (case (paren (var x0.17) (var x1.18)) (clause (paren (var x.19) (var y.20)) (binary (var x.19) +.0 (var y.20))))) (var fib.2) (access (var fib.2) tail)))))))
      (def main.3 (lambda (paren) (case (paren) (clause (paren) (call (var fib.2) (literal 10))))))
- input: |
    type Int     = prim(int)
    type List(a) = Nil | Cons(a, List)
    def map = {
      #(f, Nil) -> Nil,
      #(f, Cons(x, xs)) -> Cons(f(x), map(f, xs)),
    }
    def prune = {
      #(x,t).node -> t.node,
      #(0,t).children -> Nil,
      #(x,t).children -> map(prune(x-1), t.children),
    }
    def tree = {
      #.node -> 1,
      #.children -> Cons(tree1, Cons(tree2, Nil)),
    }
    def tree1 = {
      #.node -> 2,
      #.children -> Nil,
    }
    def tree2 = {
      #.node -> 3,
      #.children -> Cons(tree, Nil),
    }
    def main = { #() -> prune(2, tree) }
  expected:
    parser: |
      (type (var Int) (prim int))
      (type (call (var List) (var a)) (var Nil) (call (var Cons) (var a) (var List)))
      (def map (codata (clause (call (this #) (var f) (var Nil)) (var Nil)) (clause (call (this #) (var f) (call (var Cons) (var x) (var xs))) (call (var Cons) (call (var f) (var x)) (call (var map) (var f) (var xs))))))
      (def prune (codata (clause (access (call (this #) (var x) (var t)) node) (access (var t) node)) (clause (access (call (this #) (literal 0) (var t)) children) (var Nil)) (clause (access (call (this #) (var x) (var t)) children) (call (var map) (call (var prune) (binary (var x) - (literal 1))) (access (var t) children)))))
      (def tree (codata (clause (access (this #) node) (literal 1)) (clause (access (this #) children) (call (var Cons) (var tree1) (call (var Cons) (var tree2) (var Nil))))))
      (def tree1 (codata (clause (access (this #) node) (literal 2)) (clause (access (this #) children) (var Nil))))
      (def tree2 (codata (clause (access (this #) node) (literal 3)) (clause (access (this #) children) (call (var Cons) (var tree) (var Nil)))))
      (def main (codata (clause (call (this #)) (call (var prune) (literal 2) (var tree)))))
    codata: |
      (type (var Int) (prim int))
      (type (call (var List) (var a)) (var Nil) (call (var Cons) (var a) (var List)))
      (def map (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var f) (var Nil)) (var Nil)) (clause (paren (var f) (call (var Cons) (var x) (var xs))) (call (var Cons) (call (var f) (var x)) (call (var map) (var f) (var xs)))))))
      (def prune (lambda (paren (var x0) (var x1)) (object (field children (case (paren (var x0) (var x1)) (clause (paren (literal 0) (var t)) (var Nil)) (clause (paren (var x) (var t)) (call (var map) (call (var prune) (binary (var x) - (literal 1))) (access (var t) children))))) (field node (case (paren (var x0) (var x1)) (clause (paren (var x) (var t)) (access (var t) node)))))))
      (def tree (object (field children (call (var Cons) (var tree1) (call (var Cons) (var tree2) (var Nil)))) (field node (literal 1))))
      (def tree1 (object (field children (var Nil)) (field node (literal 2))))
      (def tree2 (object (field children (call (var Cons) (var tree) (var Nil))) (field node (literal 3))))
      (def main (lambda (paren) (case (paren) (clause (paren) (call (var prune) (literal 2) (var tree))))))
    infix: |
      (type (var Int) (prim int))
      (type (call (var List) (var a)) (var Nil) (call (var Cons) (var a) (var List)))
      (def map (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var f) (var Nil)) (var Nil)) (clause (paren (var f) (call (var Cons) (var x) (var xs))) (call (var Cons) (call (var f) (var x)) (call (var map) (var f) (var xs)))))))
      (def prune (lambda (paren (var x0) (var x1)) (object (field children (case (paren (var x0) (var x1)) (clause (paren (literal 0) (var t)) (var Nil)) (clause (paren (var x) (var t)) (call (var map) (call (var prune) (binary (var x) - (literal 1))) (access (var t) children))))) (field node (case (paren (var x0) (var x1)) (clause (paren (var x) (var t)) (access (var t) node)))))))
      (def tree (object (field children (call (var Cons) (var tree1) (call (var Cons) (var tree2) (var Nil)))) (field node (literal 1))))
      (def tree1 (object (field children (var Nil)) (field node (literal 2))))
      (def tree2 (object (field children (call (var Cons) (var tree) (var Nil))) (field node (literal 3))))
      (def main (lambda (paren) (case (paren) (clause (paren) (call (var prune) (literal 2) (var tree))))))
    nameresolve: |
      (type (var Int) (prim int))
      (type (call (var List) (var a)) (var Nil) (call (var Cons) (var a) (var List)))
      (def map (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var f) (var Nil)) (var Nil)) (clause (paren (var f) (call (var Cons) (var x) (var xs))) (call (var Cons) (call (var f) (var x)) (call (var map) (var f) (var xs)))))))
      (def prune (lambda (paren (var x0) (var x1)) (object (field children (case (paren (var x0) (var x1)) (clause (paren (literal 0) (var t)) (var Nil)) (clause (paren (var x) (var t)) (call (var map) (call (var prune) (binary (var x) - (literal 1))) (access (var t) children))))) (field node (case (paren (var x0) (var x1)) (clause (paren (var x) (var t)) (access (var t) node)))))))
      (def tree (object (field children (call (var Cons) (var tree1) (call (var Cons) (var tree2) (var Nil)))) (field node (literal 1))))
      (def tree1 (object (field children (var Nil)) (field node (literal 2))))
      (def tree2 (object (field children (call (var Cons) (var tree) (var Nil))) (field node (literal 3))))
      (def main (lambda (paren) (case (paren) (clause (paren) (call (var prune) (literal 2) (var tree))))))
- input: |
    infixl 6 +
    infixl 8 *
    def + = { #(x, y) -> prim(add, x, y) }
    def * = { #(x, y) -> prim(mul, x, y) }
    def main = { #() -> 1 + 2 * 3 }
  expected:
    parser: |
      (infix infixl 6 +)
      (infix infixl 8 *)
      (def + (codata (clause (call (this #) (var x) (var y)) (prim add (var x) (var y)))))
      (def * (codata (clause (call (this #) (var x) (var y)) (prim mul (var x) (var y)))))
      (def main (codata (clause (call (this #)) (binary (binary (literal 1) + (literal 2)) * (literal 3)))))
    codata: |
      (infix infixl 6 +)
      (infix infixl 8 *)
      (def + (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim add (var x) (var y))))))
      (def * (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim mul (var x) (var y))))))
      (def main (lambda (paren) (case (paren) (clause (paren) (binary (binary (literal 1) + (literal 2)) * (literal 3))))))
    infix: |
      (infix infixl 6 +)
      (infix infixl 8 *)
      (def + (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim add (var x) (var y))))))
      (def * (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim mul (var x) (var y))))))
      (def main (lambda (paren) (case (paren) (clause (paren) (binary (literal 1) + (binary (literal 2) * (literal 3)))))))
    nameresolve: |
      (infix infixl 6 +.0)
      (infix infixl 8 *.1)
      (def +.0 (lambda (paren (var x0.3) (var x1.4)) (case (paren (var x0.3) (var x1.4)) (clause (paren (var x.5) (var y.6)) (prim add (var x.5) (var y.6))))))
      (def *.1 (lambda (paren (var x0.7) (var x1.8)) (case (paren (var x0.7) (var x1.8)) (clause (paren (var x.9) (var y.10)) (prim mul (var x.9) (var y.10))))))
      (def main.2 (lambda (paren) (case (paren) (clause (paren) (binary (literal 1) +.0 (binary (literal 2) *.1 (literal 3)))))))
- input: |
    infixl 6 +
    infixl 8 *
    def + = { #(x, y) -> prim(add, x, y) }
    def * = { #(x, y) -> prim(mul, x, y) }
    def main = { #() -> 1 * 2 + 3 }
  expected:
    parser: |
      (infix infixl 6 +)
      (infix infixl 8 *)
      (def + (codata (clause (call (this #) (var x) (var y)) (prim add (var x) (var y)))))
      (def * (codata (clause (call (this #) (var x) (var y)) (prim mul (var x) (var y)))))
      (def main (codata (clause (call (this #)) (binary (binary (literal 1) * (literal 2)) + (literal 3)))))
    codata: |
      (infix infixl 6 +)
      (infix infixl 8 *)
      (def + (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim add (var x) (var y))))))
      (def * (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim mul (var x) (var y))))))
      (def main (lambda (paren) (case (paren) (clause (paren) (binary (binary (literal 1) * (literal 2)) + (literal 3))))))
    infix: |
      (infix infixl 6 +)
      (infix infixl 8 *)
      (def + (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim add (var x) (var y))))))
      (def * (lambda (paren (var x0) (var x1)) (case (paren (var x0) (var x1)) (clause (paren (var x) (var y)) (prim mul (var x) (var y))))))
      (def main (lambda (paren) (case (paren) (clause (paren) (binary (binary (literal 1) * (literal 2)) + (literal 3))))))
    nameresolve: |
      (infix infixl 6 +.0)
      (infix infixl 8 *.1)
      (def +.0 (lambda (paren (var x0.3) (var x1.4)) (case (paren (var x0.3) (var x1.4)) (clause (paren (var x.5) (var y.6)) (prim add (var x.5) (var y.6))))))
      (def *.1 (lambda (paren (var x0.7) (var x1.8)) (case (paren (var x0.7) (var x1.8)) (clause (paren (var x.9) (var y.10)) (prim mul (var x.9) (var y.10))))))
      (def main.2 (lambda (paren) (case (paren) (clause (paren) (binary (binary (literal 1) *.1 (literal 2)) +.0 (literal 3))))))
